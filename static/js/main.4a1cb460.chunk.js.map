{"version":3,"sources":["logo.svg","actions/index.js","login/index.js","home/index.js","App.js","serviceWorker.js","reducers/index.js","sagas/saga.js","index.js","store.js"],"names":["module","exports","__webpack_require__","p","Types","CREATE_ITEM","DELETE_ITEM","SETUSERNAME","SETPASSWORD","REQUEST_API_DATA","RECEIVE_API_DATA","actions","setUserName","userName","type","payload","setPassword","password","requestAPIData","receiveAPIData","data","connect","state","dispatch","item","ACTIONS","props","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","react_default","a","createElement","value","onChange","e","target","onClick","Home","App","className","react_router_dom","react_router","path","exact","component","Login","Boolean","window","location","hostname","match","defaultState","todoReducer","arguments","length","undefined","action","console","log","objectSpread","fetchNews","actionWatcher","rootSaga","json","regenerator_default","wrap","_context","prev","next","fetch","then","response","sent","put","stop","_marked","_context2","takeLatest","_marked2","_context3","all","_marked3","middleware","sagaMiddleware","createSagaMiddleware","reduxStore","createStore","reducer","applyMiddleware","run","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a1cb460.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// types of action\r\nconst Types = {\r\n    CREATE_ITEM: \"CREATE_ITEM\",\r\n    DELETE_ITEM: \"DELETE_ITEM\",\r\n    SETUSERNAME:\"SETUSERNAME\",\r\n    SETPASSWORD:\"SETPASSWORD\",\r\n    REQUEST_API_DATA:\"REQUEST_API_DATA\",\r\n    RECEIVE_API_DATA:\"RECEIVE_API_DATA\"\r\n  };\r\n  // actions\r\n  // const createItem = task => ({\r\n  //   type: Types.CREATE_ITEM,\r\n  //   payload: task\r\n  // });\r\n  \r\n  // const deleteItem = id => ({\r\n  //   type: Types.DELETE_ITEM,\r\n  //   payload: id\r\n  // });\r\n\r\n  const setUserName = (userName) => ({\r\n    type: Types.SETUSERNAME,\r\n    payload: userName\r\n  });\r\n\r\n  const setPassword = (password) => ({\r\n    type: Types.SETPASSWORD,\r\n    payload: password\r\n  });\r\n\r\n  const requestAPIData = () => ({\r\n    type: Types.REQUEST_API_DATA\r\n  });\r\n\r\n  const receiveAPIData = (data) => ({\r\n    type: Types.RECEIVE_API_DATA,\r\n    payload: data\r\n  });\r\n  \r\n  export default {\r\n    setUserName,\r\n    setPassword,\r\n    Types,\r\n    requestAPIData,\r\n    receiveAPIData\r\n  };","import React,{useState} from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport ACTIONS from '../actions'\r\n\r\nconst Login = (props)=>{\r\n    const [userName,setUserName]=useState('');\r\n    const [password,setPassword]=useState('');\r\n    const onUserNameChangeHandler = (e) => {\r\n        setUserName(e.target.value);\r\n        props.setUserName(e.target.value)\r\n    }\r\n    const onPasswordChangeHandler = (e) => {\r\n        setPassword(e.target.value);\r\n        props.setPassword(e.target.value)\r\n    }\r\n    const onClickHandler=()=>{\r\n        props.requestAPIData();\r\n    }\r\n    return(\r\n    <div>\r\n        <header>Login</header>\r\n        <div>\r\n            <label>User Name: </label>\r\n            <input type=\"text\" value={userName} onChange={onUserNameChangeHandler}></input>\r\n        </div>\r\n        <div>\r\n            <label>Password: </label>\r\n            <input type=\"password\" value={password} onChange={onPasswordChangeHandler}></input>\r\n        </div>\r\n        <button onClick={onClickHandler}>Login</button>\r\n        <div>User Name: {props.userName} Password: {props.password}</div>\r\n    </div>)\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    userName: state.userName,\r\n    password: state.password\r\n  });\r\n  \r\n  const mapDispatchToProps = dispatch => ({\r\n    setUserName: item => dispatch(ACTIONS.setUserName(item)),\r\n    setPassword: item => dispatch(ACTIONS.setPassword(item)),\r\n    requestAPIData: ()=> dispatch(ACTIONS.requestAPIData())\r\n  });\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Login)","import React from 'react';\r\n\r\nconst Home = () => {\r\n    return(\r\n        <div>\r\n            <header>Home</header>\r\n            <div>\r\n                <button>Logout</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './login';\nimport Home from './home'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction App() {\n  const onSubmitHandler = (userName,password) => {\n        console.log(userName+' '+password)\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <Router>\n            <Route path='/' exact component={Home}></Route>\n            <Route path='/login' component={Login}></Route>\n          </Router>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ACTIONS from \"../actions\";\r\n\r\nconst defaultState = {\r\n  userName:'',\r\n  password:''\r\n};\r\n\r\nconst todoReducer = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case ACTIONS.Types.SETUSERNAME:{\r\n        console.log(action.payload)\r\n        const newState={ ...state, password:action.payload}\r\n        return newState;\r\n    }\r\n    case ACTIONS.Types.SETPASSWORD:{\r\n      console.log('reducers',action.payload)\r\n      const newState={ ...state, userName:action.payload}\r\n      return newState;\r\n    }\r\n    case ACTIONS.Types.RECEIVE_API_DATA:{\r\n      console.log('RECEIVE_API_DATA: ',action.payload)\r\n      return state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todoReducer;","import ACTIONS from \"../actions\";\r\nimport { put, takeLatest, all } from 'redux-saga/effects';\r\n\r\nfunction* fetchNews() {\r\n  const json = yield fetch('https://swapi.co/api/people')\r\n        .then(response => response.json(), );  \r\n        console.log('saga',json)  \r\n  yield put({ type: ACTIONS.Types.RECEIVE_API_DATA, payload: json });\r\n}\r\n\r\nfunction* actionWatcher() {\r\n    console.log('Watcher');\r\n     yield takeLatest(ACTIONS.Types.REQUEST_API_DATA, fetchNews)\r\n}\r\nexport default function* rootSaga() {\r\n   yield all([\r\n   actionWatcher(),\r\n   ]);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport configureStore from \"./store\";\nimport rootSaga from './sagas/saga';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst reduxStore = configureStore(sagaMiddleware);\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(<ReduxProvider store={reduxStore}>\n    <App />\n</ReduxProvider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware  } from \"redux\";\r\n\r\n\r\nimport reducer from \"./reducers\";\r\n\r\nexport default function configureStore(middleware) {\r\n  const store = createStore(reducer, applyMiddleware(middleware));\r\n  return store;\r\n}"],"sourceRoot":""}